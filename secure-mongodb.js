// secure-mongodb.js - Script de s√©curisation MongoDB
require('dotenv').config();
const { MongoClient } = require('mongodb');
const crypto = require('crypto');

class MongoDBSecurer {
    constructor() {
        this.adminUri = process.env.MONGO_URI || 'mongodb://localhost:27017';
        this.dbName = 'bureau_des_jeux';
        this.adminUsername = process.env.MONGO_ADMIN_USERNAME || 'admin';
        this.adminPassword = process.env.MONGO_ADMIN_PASSWORD || 'admin123';
        this.appUsername = process.env.MONGO_APP_USERNAME || 'bureau_jeux_user';
        this.appPassword = process.env.MONGO_APP_PASSWORD || 'app123';
    }

    async connect() {
        try {
            console.log('üîó Connexion √† MongoDB...');
            this.client = new MongoClient(this.adminUri);
            await this.client.connect();
            console.log('‚úÖ Connect√© √† MongoDB');
            return true;
        } catch (error) {
            console.error('‚ùå Erreur de connexion:', error.message);
            return false;
        }
    }

    async disconnect() {
        if (this.client) {
            await this.client.close();
            console.log('üîå D√©connect√© de MongoDB');
        }
    }

    async checkCurrentSecurity() {
        console.log('\nüîç V√©rification de la s√©curit√© actuelle...');
        
        try {
            const adminDb = this.client.db('admin');
            
            // V√©rifier si l'authentification est activ√©e
            const authInfo = await adminDb.command({ getParameter: 1, authenticationMechanisms: 1 });
            console.log('   M√©canismes d\'authentification:', authInfo.authenticationMechanisms);
            
            // V√©rifier les utilisateurs existants
            const users = await adminDb.collection('system.users').find({}).toArray();
            console.log(`   Utilisateurs existants: ${users.length}`);
            
            if (users.length > 0) {
                console.log('   ‚ö†Ô∏è  Des utilisateurs existent d√©j√†');
                users.forEach(user => {
                    console.log(`      - ${user.user} (${user.db})`);
                });
            } else {
                console.log('   ‚úÖ Aucun utilisateur configur√©');
            }
            
            return users.length === 0;
        } catch (error) {
            console.log('   ‚ÑπÔ∏è  Impossible de v√©rifier la s√©curit√© (normal si pas d\'auth)');
            return true;
        }
    }

    async createAdminUser() {
        console.log('\nüë§ Cr√©ation de l\'utilisateur administrateur...');
        
        try {
            const adminDb = this.client.db('admin');
            
            // V√©rifier si l'admin existe d√©j√†
            const existingAdmin = await adminDb.collection('system.users').findOne({ user: this.adminUsername });
            if (existingAdmin) {
                console.log('   ‚ö†Ô∏è  L\'utilisateur admin existe d√©j√†');
                return true;
            }
            
            // Cr√©er l'utilisateur admin
            await adminDb.addUser(this.adminUsername, this.adminPassword, {
                roles: [
                    { role: 'userAdminAnyDatabase', db: 'admin' },
                    { role: 'readWriteAnyDatabase', db: 'admin' },
                    { role: 'dbAdminAnyDatabase', db: 'admin' }
                ]
            });
            
            console.log('   ‚úÖ Utilisateur admin cr√©√© avec succ√®s');
            return true;
        } catch (error) {
            console.error('   ‚ùå Erreur cr√©ation admin:', error.message);
            return false;
        }
    }

    async createAppUser() {
        console.log('\nüë§ Cr√©ation de l\'utilisateur application...');
        
        try {
            const appDb = this.client.db(this.dbName);
            
            // V√©rifier si l'utilisateur app existe d√©j√†
            const existingApp = await appDb.collection('system.users').findOne({ user: this.appUsername });
            if (existingApp) {
                console.log('   ‚ö†Ô∏è  L\'utilisateur application existe d√©j√†');
                return true;
            }
            
            // Cr√©er l'utilisateur application
            await appDb.addUser(this.appUsername, this.appPassword, {
                roles: [
                    { role: 'readWrite', db: this.dbName },
                    { role: 'dbAdmin', db: this.dbName }
                ]
            });
            
            console.log('   ‚úÖ Utilisateur application cr√©√© avec succ√®s');
            return true;
        } catch (error) {
            console.error('   ‚ùå Erreur cr√©ation utilisateur app:', error.message);
            return false;
        }
    }

    async enableAuthentication() {
        console.log('\nüîê Activation de l\'authentification...');
        
        try {
            // Cr√©er le fichier de configuration MongoDB
            const configContent = this.generateMongoConfig();
            
            console.log('   üìù Configuration MongoDB g√©n√©r√©e:');
            console.log('   ' + '='.repeat(50));
            console.log(configContent);
            console.log('   ' + '='.repeat(50));
            
            console.log('\n   üìã Instructions:');
            console.log('   1. Arr√™tez MongoDB');
            console.log('   2. Ajoutez la configuration ci-dessus √† votre fichier mongod.conf');
            console.log('   3. Red√©marrez MongoDB');
            console.log('   4. Testez la connexion avec: npm run test-mongo-auth');
            
            return true;
        } catch (error) {
            console.error('   ‚ùå Erreur activation auth:', error.message);
            return false;
        }
    }

    generateMongoConfig() {
        return `# Configuration MongoDB s√©curis√©e
security:
  authorization: enabled

# R√©seau
net:
  port: 27017
  bindIp: 127.0.0.1

# Stockage
storage:
  dbPath: /var/lib/mongodb
  journal:
    enabled: true

# Logs
systemLog:
  destination: file
  logAppend: true
  path: /var/log/mongodb/mongod.log

# Process
processManagement:
  timeZoneInfo: /usr/share/zoneinfo`;
    }

    async generateSecureConnectionString() {
        console.log('\nüîó Cha√Ænes de connexion s√©curis√©es:');
        console.log('   ' + '='.repeat(50));
        
        // Cha√Æne pour l'application
        const appUri = `mongodb://${this.appUsername}:${this.appPassword}@localhost:27017/${this.dbName}?authSource=${this.dbName}`;
        console.log('   Application:');
        console.log(`   ${appUri}`);
        
        // Cha√Æne pour l'admin
        const adminUri = `mongodb://${this.adminUsername}:${this.adminPassword}@localhost:27017/admin`;
        console.log('\n   Admin:');
        console.log(`   ${adminUri}`);
        
        console.log('\n   üìù Mettez √† jour votre .env avec:');
        console.log(`   MONGO_URI=${appUri}`);
        
        console.log('   ' + '='.repeat(50));
    }

    async testConnection(uri, description) {
        console.log(`\nüß™ Test de connexion: ${description}`);
        
        try {
            const testClient = new MongoClient(uri);
            await testClient.connect();
            await testClient.db().admin().ping();
            await testClient.close();
            console.log('   ‚úÖ Connexion r√©ussie');
            return true;
        } catch (error) {
            console.log(`   ‚ùå √âchec de connexion: ${error.message}`);
            return false;
        }
    }

    async runSecuritySetup() {
        console.log('üîê D√©marrage de la s√©curisation MongoDB\n');
        
        if (!await this.connect()) {
            return false;
        }
        
        try {
            // V√©rifier l'√©tat actuel
            const canProceed = await this.checkCurrentSecurity();
            
            if (!canProceed) {
                console.log('\n‚ö†Ô∏è  Des utilisateurs existent d√©j√†. Voulez-vous continuer ?');
                console.log('   Cela pourrait √©craser les utilisateurs existants.');
                console.log('   Arr√™tez le script si vous voulez pr√©server les utilisateurs existants.');
                return false;
            }
            
            // Cr√©er les utilisateurs
            const adminCreated = await this.createAdminUser();
            const appCreated = await this.createAppUser();
            
            if (adminCreated && appCreated) {
                // G√©n√©rer les cha√Ænes de connexion
                await this.generateSecureConnectionString();
                
                // Afficher les instructions
                await this.enableAuthentication();
                
                console.log('\nüéâ Configuration termin√©e !');
                console.log('\nüìã Prochaines √©tapes:');
                console.log('   1. Arr√™tez MongoDB');
                console.log('   2. Configurez l\'authentification (voir instructions ci-dessus)');
                console.log('   3. Red√©marrez MongoDB');
                console.log('   4. Testez avec: npm run test-mongo-auth');
                console.log('   5. Mettez √† jour votre .env');
                
                return true;
            } else {
                console.log('\n‚ùå Erreur lors de la cr√©ation des utilisateurs');
                return false;
            }
            
        } catch (error) {
            console.error('\n‚ùå Erreur lors de la s√©curisation:', error);
            return false;
        } finally {
            await this.disconnect();
        }
    }
}

// Fonction principale
async function main() {
    const securer = new MongoDBSecurer();
    
    // V√©rifier les arguments
    const args = process.argv.slice(2);
    
    if (args.includes('--help') || args.includes('-h')) {
        console.log(`
üîê Script de s√©curisation MongoDB

Usage:
  node secure-mongodb.js [options]

Options:
  --help, -h           Afficher cette aide
  --test               Tester la connexion apr√®s configuration
  --check-only         V√©rifier seulement l'√©tat actuel

Exemples:
  node secure-mongodb.js              # Configuration compl√®te
  node secure-mongodb.js --check-only # V√©rification seulement
  node secure-mongodb.js --test       # Configuration + test

Variables d'environnement:
  MONGO_URI            URI de connexion MongoDB
  MONGO_ADMIN_USERNAME Nom d'utilisateur admin (d√©faut: admin)
  MONGO_ADMIN_PASSWORD Mot de passe admin
  MONGO_APP_USERNAME   Nom d'utilisateur app (d√©faut: bureau_jeux_user)
  MONGO_APP_PASSWORD   Mot de passe app
        `);
        return;
    }
    
    if (args.includes('--check-only')) {
        await securer.connect();
        await securer.checkCurrentSecurity();
        await securer.disconnect();
        return;
    }
    
    if (args.includes('--test')) {
        // Test apr√®s configuration
        const appUri = `mongodb://${securer.appUsername}:${securer.appPassword}@localhost:27017/${securer.dbName}?authSource=${securer.dbName}`;
        await securer.testConnection(appUri, 'Application');
        return;
    }
    
    // Configuration compl√®te
    await securer.runSecuritySetup();
}

// Ex√©cuter le script
if (require.main === module) {
    main().catch(console.error);
}

module.exports = MongoDBSecurer; 