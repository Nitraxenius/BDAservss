// test-mongo-auth.js - Test de connexion MongoDB s√©curis√©e
require('dotenv').config();
const mongoose = require('mongoose');
const { MongoClient } = require('mongodb');

class MongoAuthTester {
    constructor() {
        this.uri = process.env.MONGO_URI;
        this.dbName = 'bureau_des_jeux';
    }

    async testMongooseConnection() {
        console.log('üß™ Test de connexion Mongoose...');
        
        try {
            await mongoose.connect(this.uri);
            console.log('   ‚úÖ Connexion Mongoose r√©ussie');
            
            // Test des op√©rations de base
            const db = mongoose.connection.db;
            const collections = await db.listCollections().toArray();
            console.log(`   üìä Collections trouv√©es: ${collections.length}`);
            
            await mongoose.disconnect();
            return true;
        } catch (error) {
            console.log(`   ‚ùå Erreur Mongoose: ${error.message}`);
            return false;
        }
    }

    async testMongoClientConnection() {
        console.log('\nüß™ Test de connexion MongoClient...');
        
        try {
            const client = new MongoClient(this.uri);
            await client.connect();
            console.log('   ‚úÖ Connexion MongoClient r√©ussie');
            
            // Test ping
            await client.db().admin().ping();
            console.log('   ‚úÖ Ping r√©ussi');
            
            // Test d'acc√®s √† la base
            const db = client.db(this.dbName);
            const collections = await db.listCollections().toArray();
            console.log(`   üìä Collections dans ${this.dbName}: ${collections.length}`);
            
            await client.close();
            return true;
        } catch (error) {
            console.log(`   ‚ùå Erreur MongoClient: ${error.message}`);
            return false;
        }
    }

    async testDatabaseOperations() {
        console.log('\nüß™ Test des op√©rations de base...');
        
        try {
            const client = new MongoClient(this.uri);
            await client.connect();
            const db = client.db(this.dbName);
            
            // Test d'√©criture
            const testCollection = db.collection('test_auth');
            const testDoc = { 
                test: true, 
                timestamp: new Date(),
                message: 'Test d\'authentification r√©ussi'
            };
            
            const insertResult = await testCollection.insertOne(testDoc);
            console.log('   ‚úÖ √âcriture r√©ussie');
            
            // Test de lecture
            const readResult = await testCollection.findOne({ _id: insertResult.insertedId });
            if (readResult) {
                console.log('   ‚úÖ Lecture r√©ussie');
            }
            
            // Test de mise √† jour
            const updateResult = await testCollection.updateOne(
                { _id: insertResult.insertedId },
                { $set: { updated: true } }
            );
            if (updateResult.modifiedCount > 0) {
                console.log('   ‚úÖ Mise √† jour r√©ussie');
            }
            
            // Test de suppression
            const deleteResult = await testCollection.deleteOne({ _id: insertResult.insertedId });
            if (deleteResult.deletedCount > 0) {
                console.log('   ‚úÖ Suppression r√©ussie');
            }
            
            await client.close();
            return true;
        } catch (error) {
            console.log(`   ‚ùå Erreur op√©rations: ${error.message}`);
            return false;
        }
    }

    async testApplicationModels() {
        console.log('\nüß™ Test des mod√®les d\'application...');
        
        try {
            await mongoose.connect(this.uri);
            
            // Importer les mod√®les
            const User = require('./models/user');
            const Game = require('./models/jeux');
            const Reservation = require('./models/reservation');
            
            // Test de comptage
            const userCount = await User.countDocuments();
            const gameCount = await Game.countDocuments();
            const reservationCount = await Reservation.countDocuments();
            
            console.log(`   üìä Utilisateurs: ${userCount}`);
            console.log(`   üìä Jeux: ${gameCount}`);
            console.log(`   üìä R√©servations: ${reservationCount}`);
            console.log('   ‚úÖ Acc√®s aux mod√®les r√©ussi');
            
            await mongoose.disconnect();
            return true;
        } catch (error) {
            console.log(`   ‚ùå Erreur mod√®les: ${error.message}`);
            return false;
        }
    }

    async runAllTests() {
        console.log('üîê Test de s√©curit√© MongoDB\n');
        console.log(`URI de test: ${this.uri}\n`);
        
        const tests = [
            { name: 'Mongoose', test: () => this.testMongooseConnection() },
            { name: 'MongoClient', test: () => this.testMongoClientConnection() },
            { name: 'Op√©rations DB', test: () => this.testDatabaseOperations() },
            { name: 'Mod√®les App', test: () => this.testApplicationModels() }
        ];
        
        let passedTests = 0;
        let totalTests = tests.length;
        
        for (const test of tests) {
            const success = await test.test();
            if (success) passedTests++;
        }
        
        console.log('\n' + '='.repeat(50));
        console.log(`üìä R√©sultats: ${passedTests}/${totalTests} tests r√©ussis`);
        
        if (passedTests === totalTests) {
            console.log('üéâ Tous les tests sont pass√©s ! MongoDB est correctement s√©curis√©.');
        } else {
            console.log('‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez votre configuration.');
        }
        
        console.log('='.repeat(50));
        
        return passedTests === totalTests;
    }
}

// Fonction principale
async function main() {
    const tester = new MongoAuthTester();
    
    // V√©rifier les arguments
    const args = process.argv.slice(2);
    
    if (args.includes('--help') || args.includes('-h')) {
        console.log(`
üß™ Test de s√©curit√© MongoDB

Usage:
  node test-mongo-auth.js [options]

Options:
  --help, -h     Afficher cette aide
  --quick        Test rapide (Mongoose seulement)

Exemples:
  node test-mongo-auth.js        # Tests complets
  node test-mongo-auth.js --quick # Test rapide

Variables d'environnement:
  MONGO_URI      URI de connexion MongoDB s√©curis√©e
        `);
        return;
    }
    
    if (args.includes('--quick')) {
        // Test rapide
        const success = await tester.testMongooseConnection();
        console.log(success ? '‚úÖ Test rapide r√©ussi' : '‚ùå Test rapide √©chou√©');
        return;
    }
    
    // Tests complets
    await tester.runAllTests();
}

// Ex√©cuter le script
if (require.main === module) {
    main().catch(console.error);
}

module.exports = MongoAuthTester; 